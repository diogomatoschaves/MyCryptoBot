# Your workflow name.
name: crypto-bot-execution - Build and Deploy to heroku.

# Run workflow on every push to master branch.
on:
  push:
    branches: [master]
    paths:
      - 'execution/**'
      - 'shared/**'
      - 'database/model/migrations/**'
      - '.github/workflows/build-deploy-execution.yml'

env:
  DIRECTORY: execution/
  HEROKU_PROCESS: web
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
  HEROKU_APP_NAME: ${{ secrets.HEROKU_EXECUTION_APP_NAME }}

jobs:
  testing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.1.2
        with:
          version: 1.1.5
          virtualenvs-create: false
      - name: Install dependencies
        run: |
          cd $DIRECTORY
          poetry config virtualenvs.create false && poetry install --no-interaction --no-ansi
      - name: Test with pytest
        env:
          TEST: true
        run: |
          python -m pytest $DIRECTORY --ds=database.settings --verbose --cov=execution --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
  build:
    runs-on: ubuntu-latest
    needs: testing
    steps:
      - uses: actions/checkout@v2
      - name: Login to heroku container registry
        run: |
          echo ${{ secrets.HEROKU_API_KEY }} | docker login --username=${{ secrets.HEROKU_EMAIL }} registry.heroku.com --password-stdin
      - name: Build and push
        run: |
          cd $DIRECTORY
          heroku container:push $HEROKU_PROCESS --app $HEROKU_APP_NAME --context-path=../
      - name: Release
        run: heroku container:release $HEROKU_PROCESS --app $HEROKU_APP_NAME